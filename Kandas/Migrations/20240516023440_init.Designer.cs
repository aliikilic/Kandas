// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.EfCore;

#nullable disable

namespace Kandas.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240516023440_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Entities.Models.District", b =>
                {
                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictID");

                    b.HasIndex("CityID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Entities.Models.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationId"), 1L, 1);

                    b.Property<int>("DonationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NecessityAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("NecessityStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecepientId")
                        .HasColumnType("int");

                    b.HasKey("DonationId");

                    b.HasIndex("DonationTypeId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("RecepientId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("Entities.Models.DonationMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DonationAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<int>("DonationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MovementStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DonationId");

                    b.HasIndex("DonationTypeId");

                    b.HasIndex("MovementStatusId");

                    b.HasIndex("PersonId");

                    b.ToTable("DonationMovements");
                });

            modelBuilder.Entity("Entities.Models.DonationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DonationTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DonationTypes");
                });

            modelBuilder.Entity("Entities.Models.EducationStatus", b =>
                {
                    b.Property<int>("EducationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationStatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationStatusId");

                    b.ToTable("EducationStatus");
                });

            modelBuilder.Entity("Entities.Models.Hospital", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AddressCityID")
                        .HasColumnType("int");

                    b.Property<string>("AddressDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressDistrictID")
                        .HasColumnType("int");

                    b.Property<int>("AddressNeighbohoodID")
                        .HasColumnType("int");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AddressCityID");

                    b.HasIndex("AddressDistrictID");

                    b.HasIndex("AddressNeighbohoodID");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Entities.Models.MovementStatus", b =>
                {
                    b.Property<int>("MovementStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovementStatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovementStatusId");

                    b.ToTable("MovementStatus");
                });

            modelBuilder.Entity("Entities.Models.Neighborhood", b =>
                {
                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("NeighborhoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NeighborhoodId");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationId");

                    b.HasIndex("DonationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entities.Models.PersonalInformation", b =>
                {
                    b.Property<int>("PersonalInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalInformationId"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BirthPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Marriage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonEducationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResidanceDistrictId")
                        .HasColumnType("int");

                    b.Property<int>("ResidanceNeighborhoodId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PersonalInformationId");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonEducationStatusId");

                    b.HasIndex("ResidanceDistrictId");

                    b.HasIndex("ResidanceNeighborhoodId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PersonalInformations");
                });

            modelBuilder.Entity("Entities.Models.PersonalInformationNotifications", b =>
                {
                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.HasIndex("NotificationId");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("PersonalInformationNotification", (string)null);
                });

            modelBuilder.Entity("Entities.Models.PersonInquiryForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AIDSRel")
                        .HasColumnType("bit");

                    b.Property<bool>("AIDSSuspicion")
                        .HasColumnType("bit");

                    b.Property<bool>("Acne")
                        .HasColumnType("bit");

                    b.Property<bool>("Allergic")
                        .HasColumnType("bit");

                    b.Property<bool>("Arrest")
                        .HasColumnType("bit");

                    b.Property<bool>("BloodContact")
                        .HasColumnType("bit");

                    b.Property<bool>("BloodDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("Botox")
                        .HasColumnType("bit");

                    b.Property<bool>("Cameroon")
                        .HasColumnType("bit");

                    b.Property<bool>("Cancer")
                        .HasColumnType("bit");

                    b.Property<bool>("Cardiovascular")
                        .HasColumnType("bit");

                    b.Property<bool>("ChronicIllness")
                        .HasColumnType("bit");

                    b.Property<bool>("Cornea")
                        .HasColumnType("bit");

                    b.Property<bool>("CreutzfeldtJakob")
                        .HasColumnType("bit");

                    b.Property<bool>("DangerousWork")
                        .HasColumnType("bit");

                    b.Property<bool>("Dental")
                        .HasColumnType("bit");

                    b.Property<bool>("Diabetes")
                        .HasColumnType("bit");

                    b.Property<bool>("Dialysis")
                        .HasColumnType("bit");

                    b.Property<bool>("Diarrhea")
                        .HasColumnType("bit");

                    b.Property<bool>("Epilepsy")
                        .HasColumnType("bit");

                    b.Property<bool>("Insulin")
                        .HasColumnType("bit");

                    b.Property<bool>("Jaundice")
                        .HasColumnType("bit");

                    b.Property<bool>("JaundiceAtHome")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LastDonation")
                        .HasColumnType("bit");

                    b.Property<bool>("Miscarriage")
                        .HasColumnType("bit");

                    b.Property<bool>("MoneyDrug")
                        .HasColumnType("bit");

                    b.Property<bool>("OrganTransplant")
                        .HasColumnType("bit");

                    b.Property<bool>("OtherCountries")
                        .HasColumnType("bit");

                    b.Property<bool>("OtherMedicine")
                        .HasColumnType("bit");

                    b.Property<bool>("PainKiller")
                        .HasColumnType("bit");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.Property<bool>("PreviouslyReject")
                        .HasColumnType("bit");

                    b.Property<bool>("Rabies")
                        .HasColumnType("bit");

                    b.Property<bool>("Surgery")
                        .HasColumnType("bit");

                    b.Property<bool>("Syphilis")
                        .HasColumnType("bit");

                    b.Property<bool>("TattooCupping")
                        .HasColumnType("bit");

                    b.Property<bool>("Toxoplasma")
                        .HasColumnType("bit");

                    b.Property<bool>("UsingDrugs")
                        .HasColumnType("bit");

                    b.Property<bool>("Vaccine")
                        .HasColumnType("bit");

                    b.Property<bool>("Wales")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PersonalInformationId")
                        .IsUnique();

                    b.ToTable("PersonInquiryForms");
                });

            modelBuilder.Entity("Entities.Models.Recepient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BirthPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.ToTable("Recepients");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "12e7b6ff-3906-4d4c-a218-3501ae33dcf7",
                            ConcurrencyStamp = "ac14dc92-c0f3-4df4-a5af-5510938ac540",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "6971b3ff-02ef-4192-99c3-9ca05f59da62",
                            ConcurrencyStamp = "142df170-2089-4707-804b-25003d094701",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NotificationPersonalInformation", b =>
                {
                    b.Property<int>("NotificationsNotificationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonIdPersonalInformationId")
                        .HasColumnType("int");

                    b.HasKey("NotificationsNotificationId", "PersonIdPersonalInformationId");

                    b.HasIndex("PersonIdPersonalInformationId");

                    b.ToTable("NotificationPersonalInformation");
                });

            modelBuilder.Entity("Entities.Models.District", b =>
                {
                    b.HasOne("Entities.Models.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Entities.Models.Donation", b =>
                {
                    b.HasOne("Entities.Models.DonationType", "DonationType")
                        .WithMany("Donations")
                        .HasForeignKey("DonationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Hospital", "Hospital")
                        .WithMany("Donations")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Recepient", "Recepient")
                        .WithMany("Donation")
                        .HasForeignKey("RecepientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DonationType");

                    b.Navigation("Hospital");

                    b.Navigation("Recepient");
                });

            modelBuilder.Entity("Entities.Models.DonationMovement", b =>
                {
                    b.HasOne("Entities.Models.Donation", "Donation")
                        .WithMany("DonationMovement")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.DonationType", "DonationType")
                        .WithMany("DonationMovements")
                        .HasForeignKey("DonationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.MovementStatus", "MovementStatus")
                        .WithMany("DonationMovements")
                        .HasForeignKey("MovementStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.PersonalInformation", "PersonalDetails")
                        .WithMany("DonationMovements")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donation");

                    b.Navigation("DonationType");

                    b.Navigation("MovementStatus");

                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("Entities.Models.Hospital", b =>
                {
                    b.HasOne("Entities.Models.City", "AddressCity")
                        .WithMany("Hospital")
                        .HasForeignKey("AddressCityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.District", "AddressDistrict")
                        .WithMany("Hospital")
                        .HasForeignKey("AddressDistrictID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Neighborhood", "AddressNeighbohood")
                        .WithMany("Hospital")
                        .HasForeignKey("AddressNeighbohoodID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddressCity");

                    b.Navigation("AddressDistrict");

                    b.Navigation("AddressNeighbohood");
                });

            modelBuilder.Entity("Entities.Models.Neighborhood", b =>
                {
                    b.HasOne("Entities.Models.City", "City")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.District", "District")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.HasOne("Entities.Models.Donation", "Donation")
                        .WithMany("Notifications")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Donation");
                });

            modelBuilder.Entity("Entities.Models.PersonalInformation", b =>
                {
                    b.HasOne("Entities.Models.City", "BirthPlace")
                        .WithMany("BirthPlaceDetails")
                        .HasForeignKey("BirthPlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.City", "ResidanceCity")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.EducationStatus", "PersonEducationStatus")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("PersonEducationStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.District", "ResidanceDistrict")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("ResidanceDistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Neighborhood", "ResidanceNeighborhood")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("ResidanceNeighborhoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithOne("PersonalDetails")
                        .HasForeignKey("Entities.Models.PersonalInformation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirthPlace");

                    b.Navigation("PersonEducationStatus");

                    b.Navigation("ResidanceCity");

                    b.Navigation("ResidanceDistrict");

                    b.Navigation("ResidanceNeighborhood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.PersonalInformationNotifications", b =>
                {
                    b.HasOne("Entities.Models.Notification", "Notifications")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.PersonalInformation", "PersonalInformations")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("PersonalInformations");
                });

            modelBuilder.Entity("Entities.Models.PersonInquiryForm", b =>
                {
                    b.HasOne("Entities.Models.PersonalInformation", "PersonalDetails")
                        .WithOne("PersonInquiryForm")
                        .HasForeignKey("Entities.Models.PersonInquiryForm", "PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("Entities.Models.Recepient", b =>
                {
                    b.HasOne("Entities.Models.City", "BirthPlace")
                        .WithMany("BirthPlace")
                        .HasForeignKey("BirthPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirthPlace");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotificationPersonalInformation", b =>
                {
                    b.HasOne("Entities.Models.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationsNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.PersonalInformation", null)
                        .WithMany()
                        .HasForeignKey("PersonIdPersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Navigation("BirthPlace");

                    b.Navigation("BirthPlaceDetails");

                    b.Navigation("Districts");

                    b.Navigation("Hospital");

                    b.Navigation("Neighborhoods");

                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("Entities.Models.District", b =>
                {
                    b.Navigation("Hospital");

                    b.Navigation("Neighborhoods");

                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("Entities.Models.Donation", b =>
                {
                    b.Navigation("DonationMovement");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Entities.Models.DonationType", b =>
                {
                    b.Navigation("DonationMovements");

                    b.Navigation("Donations");
                });

            modelBuilder.Entity("Entities.Models.EducationStatus", b =>
                {
                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("Entities.Models.Hospital", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("Entities.Models.MovementStatus", b =>
                {
                    b.Navigation("DonationMovements");
                });

            modelBuilder.Entity("Entities.Models.Neighborhood", b =>
                {
                    b.Navigation("Hospital");

                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("Entities.Models.PersonalInformation", b =>
                {
                    b.Navigation("DonationMovements");

                    b.Navigation("PersonInquiryForm")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Recepient", b =>
                {
                    b.Navigation("Donation");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("PersonalDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
